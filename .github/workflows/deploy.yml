name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Install dependencies and build frontend (on GitHub Actions runner)
        run: |
          npm install --prefix backend --omit=dev
          npm install
          npm run build
          npm audit fix || true

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy and Restart Services on VPS
        run: |
          VPS_USER="${{ secrets.EC2_USER }}"
          VPS_HOST="${{ secrets.EC2_HOST }}"
          APP_DIR="~/app"

          # Step 1: Ensure the app directory on the VPS is owned by the SSH user (ubuntu)
          ssh "${VPS_USER}@${VPS_HOST}" "sudo chown -R ${VPS_USER}:${VPS_USER} ${APP_DIR}"

          # Step 2: Use rsync to transfer files
          rsync -avz --no-times --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r \
            --delete \
            --exclude node_modules \
            --exclude .git \
            --exclude .env \
            . "${VPS_USER}@${VPS_HOST}:${APP_DIR}/"

          # Step 3: Execute commands on the VPS after files are transferred
          ssh "${VPS_USER}@${VPS_HOST}" << 'EOF'
            set -e

            # --- CRITICAL FIX: Load NVM and Node.js environment ---
            # This makes 'npm' command available in the PATH for non-interactive shells
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
            nvm use 22 # Ensure we are using Node.js 22.x
            # ---------------------------------------------------

            cd ~/app

            # Create/Update .env file BEFORE changing ownership to www-data
            printf '%s\n' "${{ secrets.ENV_VARS }}" > .env
            chmod 600 .env

            # Now, fix permissions for Nginx and runtime after .env is created
            sudo chown -R www-data:www-data .
            sudo chmod -R 755 .
            find . -type f -exec sudo chmod 644 {} \;
            sudo chmod o+rx /home/ubuntu/

            # Rebuild dependencies on the server (now 'npm' will be found)
            npm ci --prefix backend --omit=dev

            pm2 stop mafam-backend --update-env || true
            pm2 delete mafam-backend || true
            pm2 start backend/index.js --name mafam-backend --time
            pm2 save
            
            sudo systemctl restart nginx
          EOF
